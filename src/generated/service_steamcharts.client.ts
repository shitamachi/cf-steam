// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "service_steamcharts.proto" (syntax proto2)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SteamCharts } from "./service_steamcharts";
import type { CSteamCharts_GetTopReleasesPages_Response } from "./service_steamcharts";
import type { CSteamCharts_GetTopReleasesPages_Request } from "./service_steamcharts";
import type { CSteamCharts_GetMostPlayedSteamDeckGames_Response } from "./service_steamcharts";
import type { CSteamCharts_GetMostPlayedSteamDeckGames_Request } from "./service_steamcharts";
import type { CSteamCharts_GetMostPlayedGames_Response } from "./service_steamcharts";
import type { CSteamCharts_GetMostPlayedGames_Request } from "./service_steamcharts";
import type { CSteamCharts_GetMonthTopAppReleases_Response } from "./service_steamcharts";
import type { CSteamCharts_GetMonthTopAppReleases_Request } from "./service_steamcharts";
import type { CSteamCharts_GetGamesByConcurrentPlayers_Response } from "./service_steamcharts";
import type { CSteamCharts_GetGamesByConcurrentPlayers_Request } from "./service_steamcharts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CSteamCharts_GetBestOfYearPages_Response } from "./service_steamcharts";
import type { CSteamCharts_GetBestOfYearPages_Request } from "./service_steamcharts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SteamCharts
 */
export interface ISteamChartsClient {
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetBestOfYearPages
     */
    getBestOfYearPages(input: CSteamCharts_GetBestOfYearPages_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetBestOfYearPages_Request, CSteamCharts_GetBestOfYearPages_Response>;
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetGamesByConcurrentPlayers
     */
    getGamesByConcurrentPlayers(input: CSteamCharts_GetGamesByConcurrentPlayers_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetGamesByConcurrentPlayers_Request, CSteamCharts_GetGamesByConcurrentPlayers_Response>;
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMonthTopAppReleases
     */
    getMonthTopAppReleases(input: CSteamCharts_GetMonthTopAppReleases_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMonthTopAppReleases_Request, CSteamCharts_GetMonthTopAppReleases_Response>;
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMostPlayedGames
     */
    getMostPlayedGames(input: CSteamCharts_GetMostPlayedGames_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMostPlayedGames_Request, CSteamCharts_GetMostPlayedGames_Response>;
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMostPlayedSteamDeckGames
     */
    getMostPlayedSteamDeckGames(input: CSteamCharts_GetMostPlayedSteamDeckGames_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMostPlayedSteamDeckGames_Request, CSteamCharts_GetMostPlayedSteamDeckGames_Response>;
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetTopReleasesPages
     */
    getTopReleasesPages(input: CSteamCharts_GetTopReleasesPages_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetTopReleasesPages_Request, CSteamCharts_GetTopReleasesPages_Response>;
}
/**
 * @generated from protobuf service SteamCharts
 */
export class SteamChartsClient implements ISteamChartsClient, ServiceInfo {
    typeName = SteamCharts.typeName;
    methods = SteamCharts.methods;
    options = SteamCharts.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetBestOfYearPages
     */
    getBestOfYearPages(input: CSteamCharts_GetBestOfYearPages_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetBestOfYearPages_Request, CSteamCharts_GetBestOfYearPages_Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetBestOfYearPages_Request, CSteamCharts_GetBestOfYearPages_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetGamesByConcurrentPlayers
     */
    getGamesByConcurrentPlayers(input: CSteamCharts_GetGamesByConcurrentPlayers_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetGamesByConcurrentPlayers_Request, CSteamCharts_GetGamesByConcurrentPlayers_Response> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetGamesByConcurrentPlayers_Request, CSteamCharts_GetGamesByConcurrentPlayers_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMonthTopAppReleases
     */
    getMonthTopAppReleases(input: CSteamCharts_GetMonthTopAppReleases_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMonthTopAppReleases_Request, CSteamCharts_GetMonthTopAppReleases_Response> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetMonthTopAppReleases_Request, CSteamCharts_GetMonthTopAppReleases_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMostPlayedGames
     */
    getMostPlayedGames(input: CSteamCharts_GetMostPlayedGames_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMostPlayedGames_Request, CSteamCharts_GetMostPlayedGames_Response> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetMostPlayedGames_Request, CSteamCharts_GetMostPlayedGames_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetMostPlayedSteamDeckGames
     */
    getMostPlayedSteamDeckGames(input: CSteamCharts_GetMostPlayedSteamDeckGames_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetMostPlayedSteamDeckGames_Request, CSteamCharts_GetMostPlayedSteamDeckGames_Response> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetMostPlayedSteamDeckGames_Request, CSteamCharts_GetMostPlayedSteamDeckGames_Response>("unary", this._transport, method, opt, input);
    }
    /**
     * bConstMethod=true, ePrivilege=2, eWebAPIKeyRequirement=1
     *
     * @generated from protobuf rpc: GetTopReleasesPages
     */
    getTopReleasesPages(input: CSteamCharts_GetTopReleasesPages_Request, options?: RpcOptions): UnaryCall<CSteamCharts_GetTopReleasesPages_Request, CSteamCharts_GetTopReleasesPages_Response> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CSteamCharts_GetTopReleasesPages_Request, CSteamCharts_GetTopReleasesPages_Response>("unary", this._transport, method, opt, input);
    }
}
