// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "service_steamcharts.proto" (syntax proto2)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StoreItemID } from "./common";
import { StoreItem } from "./common";
import { StoreBrowseItemDataRequest } from "./common";
import { StoreBrowseContext } from "./common";
/**
 * @generated from protobuf message CSteamCharts_GetBestOfYearPages_Request
 */
export interface CSteamCharts_GetBestOfYearPages_Request {
}
/**
 * @generated from protobuf message CSteamCharts_GetBestOfYearPages_Response
 */
export interface CSteamCharts_GetBestOfYearPages_Response {
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage pages = 1
     */
    pages: CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage[];
}
/**
 * @generated from protobuf message CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
 */
export interface CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string url_path = 2
     */
    urlPath?: string;
    /**
     * @generated from protobuf field: repeated string banner_url = 3
     */
    bannerUrl: string[];
    /**
     * @generated from protobuf field: repeated string banner_url_mobile = 4
     */
    bannerUrlMobile: string[];
    /**
     * @generated from protobuf field: optional uint32 start_date = 5
     */
    startDate?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Request
 */
export interface CSteamCharts_GetGamesByConcurrentPlayers_Request {
    /**
     * @generated from protobuf field: optional StoreBrowseContext context = 1
     */
    context?: StoreBrowseContext;
    /**
     * @generated from protobuf field: optional StoreBrowseItemDataRequest data_request = 2
     */
    dataRequest?: StoreBrowseItemDataRequest;
}
/**
 * @generated from protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Response
 */
export interface CSteamCharts_GetGamesByConcurrentPlayers_Response {
    /**
     * @generated from protobuf field: optional uint32 last_update = 1
     */
    lastUpdate?: number;
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank ranks = 2
     */
    ranks: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank[];
}
/**
 * @generated from protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
 */
export interface CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank {
    /**
     * @generated from protobuf field: optional int32 rank = 1
     */
    rank?: number;
    /**
     * @generated from protobuf field: optional uint32 appid = 2
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional StoreItem item = 3
     */
    item?: StoreItem;
    /**
     * @generated from protobuf field: optional uint32 concurrent_in_game = 4
     */
    concurrentInGame?: number;
    /**
     * @generated from protobuf field: optional uint32 peak_in_game = 5
     */
    peakInGame?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMonthTopAppReleases_Request
 */
export interface CSteamCharts_GetMonthTopAppReleases_Request {
    /**
     * @generated from protobuf field: optional uint32 rtime_month = 1
     */
    rtimeMonth?: number;
    /**
     * @generated from protobuf field: optional bool include_dlc = 2
     */
    includeDlc?: boolean;
    /**
     * @generated from protobuf field: optional uint32 top_results_limit = 3
     */
    topResultsLimit?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMonthTopAppReleases_Response
 */
export interface CSteamCharts_GetMonthTopAppReleases_Response {
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_dlc_releases = 2
     */
    topDlcReleases: CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease[];
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_combined_app_and_dlc_releases = 3
     */
    topCombinedAppAndDlcReleases: CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease[];
}
/**
 * @generated from protobuf message CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease
 */
export interface CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease {
    /**
     * @generated from protobuf field: optional uint32 appid = 1
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional uint32 rtime_release = 2
     */
    rtimeRelease?: number;
    /**
     * @generated from protobuf field: optional int32 app_release_rank = 3
     */
    appReleaseRank?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedGames_Request
 */
export interface CSteamCharts_GetMostPlayedGames_Request {
    /**
     * @generated from protobuf field: optional StoreBrowseContext context = 1
     */
    context?: StoreBrowseContext;
    /**
     * @generated from protobuf field: optional StoreBrowseItemDataRequest data_request = 2
     */
    dataRequest?: StoreBrowseItemDataRequest;
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedGames_Response
 */
export interface CSteamCharts_GetMostPlayedGames_Response {
    /**
     * @generated from protobuf field: optional uint32 rollup_date = 1
     */
    rollupDate?: number;
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank ranks = 2
     */
    ranks: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank[];
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
 */
export interface CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank {
    /**
     * @generated from protobuf field: optional int32 rank = 1
     */
    rank?: number;
    /**
     * @generated from protobuf field: optional uint32 appid = 2
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional StoreItem item = 3
     */
    item?: StoreItem;
    /**
     * @generated from protobuf field: optional int32 last_week_rank = 4
     */
    lastWeekRank?: number;
    /**
     * @generated from protobuf field: optional uint32 peak_in_game = 5
     */
    peakInGame?: number;
    /**
     * @generated from protobuf field: optional uint32 daily_active_players = 6
     */
    dailyActivePlayers?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Request
 */
export interface CSteamCharts_GetMostPlayedSteamDeckGames_Request {
    /**
     * @generated from protobuf field: optional StoreBrowseContext context = 1
     */
    context?: StoreBrowseContext;
    /**
     * @generated from protobuf field: optional StoreBrowseItemDataRequest data_request = 2
     */
    dataRequest?: StoreBrowseItemDataRequest;
    /**
     * @generated from protobuf field: optional int32 top_played_period = 3
     */
    topPlayedPeriod?: number;
    /**
     * @generated from protobuf field: optional int32 count = 4
     */
    count?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Response
 */
export interface CSteamCharts_GetMostPlayedSteamDeckGames_Response {
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank ranks = 1
     */
    ranks: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank[];
    /**
     * @generated from protobuf field: optional int32 top_played_period = 2
     */
    topPlayedPeriod?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
 */
export interface CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank {
    /**
     * @generated from protobuf field: optional int32 rank = 1
     */
    rank?: number;
    /**
     * @generated from protobuf field: optional uint32 appid = 2
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional StoreItem item = 3
     */
    item?: StoreItem;
    /**
     * @generated from protobuf field: optional int32 last_period_rank = 4
     */
    lastPeriodRank?: number;
}
/**
 * @generated from protobuf message CSteamCharts_GetTopReleasesPages_Request
 */
export interface CSteamCharts_GetTopReleasesPages_Request {
}
/**
 * @generated from protobuf message CSteamCharts_GetTopReleasesPages_Response
 */
export interface CSteamCharts_GetTopReleasesPages_Response {
    /**
     * @generated from protobuf field: repeated CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage pages = 1
     */
    pages: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage[];
}
/**
 * @generated from protobuf message CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
 */
export interface CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: optional uint32 start_of_month = 2
     */
    startOfMonth?: number;
    /**
     * @generated from protobuf field: optional string url_path = 3
     */
    urlPath?: string;
    /**
     * @generated from protobuf field: repeated StoreItemID item_ids = 4
     */
    itemIds: StoreItemID[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetBestOfYearPages_Request$Type extends MessageType<CSteamCharts_GetBestOfYearPages_Request> {
    constructor() {
        super("CSteamCharts_GetBestOfYearPages_Request", []);
    }
    create(value?: PartialMessage<CSteamCharts_GetBestOfYearPages_Request>): CSteamCharts_GetBestOfYearPages_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetBestOfYearPages_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetBestOfYearPages_Request): CSteamCharts_GetBestOfYearPages_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetBestOfYearPages_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetBestOfYearPages_Request
 */
export const CSteamCharts_GetBestOfYearPages_Request = new CSteamCharts_GetBestOfYearPages_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetBestOfYearPages_Response$Type extends MessageType<CSteamCharts_GetBestOfYearPages_Response> {
    constructor() {
        super("CSteamCharts_GetBestOfYearPages_Response", [
            { no: 1, name: "pages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetBestOfYearPages_Response>): CSteamCharts_GetBestOfYearPages_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pages = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetBestOfYearPages_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetBestOfYearPages_Response): CSteamCharts_GetBestOfYearPages_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage pages */ 1:
                    message.pages.push(CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetBestOfYearPages_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage pages = 1; */
        for (let i = 0; i < message.pages.length; i++)
            CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage.internalBinaryWrite(message.pages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetBestOfYearPages_Response
 */
export const CSteamCharts_GetBestOfYearPages_Response = new CSteamCharts_GetBestOfYearPages_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage$Type extends MessageType<CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage> {
    constructor() {
        super("CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "banner_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "banner_url_mobile", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "start_date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage>): CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bannerUrl = [];
        message.bannerUrlMobile = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage): CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string url_path */ 2:
                    message.urlPath = reader.string();
                    break;
                case /* repeated string banner_url */ 3:
                    message.bannerUrl.push(reader.string());
                    break;
                case /* repeated string banner_url_mobile */ 4:
                    message.bannerUrlMobile.push(reader.string());
                    break;
                case /* optional uint32 start_date */ 5:
                    message.startDate = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string url_path = 2; */
        if (message.urlPath !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.urlPath);
        /* repeated string banner_url = 3; */
        for (let i = 0; i < message.bannerUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.bannerUrl[i]);
        /* repeated string banner_url_mobile = 4; */
        for (let i = 0; i < message.bannerUrlMobile.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.bannerUrlMobile[i]);
        /* optional uint32 start_date = 5; */
        if (message.startDate !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.startDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
 */
export const CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage = new CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetGamesByConcurrentPlayers_Request$Type extends MessageType<CSteamCharts_GetGamesByConcurrentPlayers_Request> {
    constructor() {
        super("CSteamCharts_GetGamesByConcurrentPlayers_Request", [
            { no: 1, name: "context", kind: "message", T: () => StoreBrowseContext },
            { no: 2, name: "data_request", kind: "message", T: () => StoreBrowseItemDataRequest }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetGamesByConcurrentPlayers_Request>): CSteamCharts_GetGamesByConcurrentPlayers_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetGamesByConcurrentPlayers_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetGamesByConcurrentPlayers_Request): CSteamCharts_GetGamesByConcurrentPlayers_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional StoreBrowseContext context */ 1:
                    message.context = StoreBrowseContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* optional StoreBrowseItemDataRequest data_request */ 2:
                    message.dataRequest = StoreBrowseItemDataRequest.internalBinaryRead(reader, reader.uint32(), options, message.dataRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetGamesByConcurrentPlayers_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional StoreBrowseContext context = 1; */
        if (message.context)
            StoreBrowseContext.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional StoreBrowseItemDataRequest data_request = 2; */
        if (message.dataRequest)
            StoreBrowseItemDataRequest.internalBinaryWrite(message.dataRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Request
 */
export const CSteamCharts_GetGamesByConcurrentPlayers_Request = new CSteamCharts_GetGamesByConcurrentPlayers_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetGamesByConcurrentPlayers_Response$Type extends MessageType<CSteamCharts_GetGamesByConcurrentPlayers_Response> {
    constructor() {
        super("CSteamCharts_GetGamesByConcurrentPlayers_Response", [
            { no: 1, name: "last_update", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ranks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetGamesByConcurrentPlayers_Response>): CSteamCharts_GetGamesByConcurrentPlayers_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ranks = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetGamesByConcurrentPlayers_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetGamesByConcurrentPlayers_Response): CSteamCharts_GetGamesByConcurrentPlayers_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 last_update */ 1:
                    message.lastUpdate = reader.uint32();
                    break;
                case /* repeated CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank ranks */ 2:
                    message.ranks.push(CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetGamesByConcurrentPlayers_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 last_update = 1; */
        if (message.lastUpdate !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.lastUpdate);
        /* repeated CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank ranks = 2; */
        for (let i = 0; i < message.ranks.length; i++)
            CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.internalBinaryWrite(message.ranks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Response
 */
export const CSteamCharts_GetGamesByConcurrentPlayers_Response = new CSteamCharts_GetGamesByConcurrentPlayers_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank$Type extends MessageType<CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank> {
    constructor() {
        super("CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank", [
            { no: 1, name: "rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item", kind: "message", T: () => StoreItem },
            { no: 4, name: "concurrent_in_game", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "peak_in_game", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank>): CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank): CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* optional uint32 appid */ 2:
                    message.appid = reader.uint32();
                    break;
                case /* optional StoreItem item */ 3:
                    message.item = StoreItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional uint32 concurrent_in_game */ 4:
                    message.concurrentInGame = reader.uint32();
                    break;
                case /* optional uint32 peak_in_game */ 5:
                    message.peakInGame = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 rank = 1; */
        if (message.rank !== undefined)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* optional uint32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.appid);
        /* optional StoreItem item = 3; */
        if (message.item)
            StoreItem.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 concurrent_in_game = 4; */
        if (message.concurrentInGame !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.concurrentInGame);
        /* optional uint32 peak_in_game = 5; */
        if (message.peakInGame !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.peakInGame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
 */
export const CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank = new CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMonthTopAppReleases_Request$Type extends MessageType<CSteamCharts_GetMonthTopAppReleases_Request> {
    constructor() {
        super("CSteamCharts_GetMonthTopAppReleases_Request", [
            { no: 1, name: "rtime_month", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "include_dlc", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "top_results_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMonthTopAppReleases_Request>): CSteamCharts_GetMonthTopAppReleases_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMonthTopAppReleases_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMonthTopAppReleases_Request): CSteamCharts_GetMonthTopAppReleases_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rtime_month */ 1:
                    message.rtimeMonth = reader.uint32();
                    break;
                case /* optional bool include_dlc */ 2:
                    message.includeDlc = reader.bool();
                    break;
                case /* optional uint32 top_results_limit */ 3:
                    message.topResultsLimit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMonthTopAppReleases_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rtime_month = 1; */
        if (message.rtimeMonth !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.rtimeMonth);
        /* optional bool include_dlc = 2; */
        if (message.includeDlc !== undefined)
            writer.tag(2, WireType.Varint).bool(message.includeDlc);
        /* optional uint32 top_results_limit = 3; */
        if (message.topResultsLimit !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.topResultsLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMonthTopAppReleases_Request
 */
export const CSteamCharts_GetMonthTopAppReleases_Request = new CSteamCharts_GetMonthTopAppReleases_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMonthTopAppReleases_Response$Type extends MessageType<CSteamCharts_GetMonthTopAppReleases_Response> {
    constructor() {
        super("CSteamCharts_GetMonthTopAppReleases_Response", [
            { no: 2, name: "top_dlc_releases", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease },
            { no: 3, name: "top_combined_app_and_dlc_releases", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMonthTopAppReleases_Response>): CSteamCharts_GetMonthTopAppReleases_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topDlcReleases = [];
        message.topCombinedAppAndDlcReleases = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMonthTopAppReleases_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMonthTopAppReleases_Response): CSteamCharts_GetMonthTopAppReleases_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_dlc_releases */ 2:
                    message.topDlcReleases.push(CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_combined_app_and_dlc_releases */ 3:
                    message.topCombinedAppAndDlcReleases.push(CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMonthTopAppReleases_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_dlc_releases = 2; */
        for (let i = 0; i < message.topDlcReleases.length; i++)
            CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease.internalBinaryWrite(message.topDlcReleases[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease top_combined_app_and_dlc_releases = 3; */
        for (let i = 0; i < message.topCombinedAppAndDlcReleases.length; i++)
            CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease.internalBinaryWrite(message.topCombinedAppAndDlcReleases[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMonthTopAppReleases_Response
 */
export const CSteamCharts_GetMonthTopAppReleases_Response = new CSteamCharts_GetMonthTopAppReleases_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease$Type extends MessageType<CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease> {
    constructor() {
        super("CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease", [
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "rtime_release", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "app_release_rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { description: "enum" } }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease>): CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease): CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 appid */ 1:
                    message.appid = reader.uint32();
                    break;
                case /* optional uint32 rtime_release */ 2:
                    message.rtimeRelease = reader.uint32();
                    break;
                case /* optional int32 app_release_rank */ 3:
                    message.appReleaseRank = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.appid);
        /* optional uint32 rtime_release = 2; */
        if (message.rtimeRelease !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rtimeRelease);
        /* optional int32 app_release_rank = 3; */
        if (message.appReleaseRank !== undefined)
            writer.tag(3, WireType.Varint).int32(message.appReleaseRank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease
 */
export const CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease = new CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedGames_Request$Type extends MessageType<CSteamCharts_GetMostPlayedGames_Request> {
    constructor() {
        super("CSteamCharts_GetMostPlayedGames_Request", [
            { no: 1, name: "context", kind: "message", T: () => StoreBrowseContext },
            { no: 2, name: "data_request", kind: "message", T: () => StoreBrowseItemDataRequest }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedGames_Request>): CSteamCharts_GetMostPlayedGames_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedGames_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedGames_Request): CSteamCharts_GetMostPlayedGames_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional StoreBrowseContext context */ 1:
                    message.context = StoreBrowseContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* optional StoreBrowseItemDataRequest data_request */ 2:
                    message.dataRequest = StoreBrowseItemDataRequest.internalBinaryRead(reader, reader.uint32(), options, message.dataRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedGames_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional StoreBrowseContext context = 1; */
        if (message.context)
            StoreBrowseContext.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional StoreBrowseItemDataRequest data_request = 2; */
        if (message.dataRequest)
            StoreBrowseItemDataRequest.internalBinaryWrite(message.dataRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedGames_Request
 */
export const CSteamCharts_GetMostPlayedGames_Request = new CSteamCharts_GetMostPlayedGames_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedGames_Response$Type extends MessageType<CSteamCharts_GetMostPlayedGames_Response> {
    constructor() {
        super("CSteamCharts_GetMostPlayedGames_Response", [
            { no: 1, name: "rollup_date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ranks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedGames_Response>): CSteamCharts_GetMostPlayedGames_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ranks = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedGames_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedGames_Response): CSteamCharts_GetMostPlayedGames_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rollup_date */ 1:
                    message.rollupDate = reader.uint32();
                    break;
                case /* repeated CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank ranks */ 2:
                    message.ranks.push(CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedGames_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rollup_date = 1; */
        if (message.rollupDate !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.rollupDate);
        /* repeated CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank ranks = 2; */
        for (let i = 0; i < message.ranks.length; i++)
            CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.internalBinaryWrite(message.ranks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedGames_Response
 */
export const CSteamCharts_GetMostPlayedGames_Response = new CSteamCharts_GetMostPlayedGames_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank$Type extends MessageType<CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank> {
    constructor() {
        super("CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank", [
            { no: 1, name: "rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item", kind: "message", T: () => StoreItem },
            { no: 4, name: "last_week_rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "peak_in_game", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "daily_active_players", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank>): CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank): CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* optional uint32 appid */ 2:
                    message.appid = reader.uint32();
                    break;
                case /* optional StoreItem item */ 3:
                    message.item = StoreItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional int32 last_week_rank */ 4:
                    message.lastWeekRank = reader.int32();
                    break;
                case /* optional uint32 peak_in_game */ 5:
                    message.peakInGame = reader.uint32();
                    break;
                case /* optional uint32 daily_active_players */ 6:
                    message.dailyActivePlayers = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 rank = 1; */
        if (message.rank !== undefined)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* optional uint32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.appid);
        /* optional StoreItem item = 3; */
        if (message.item)
            StoreItem.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 last_week_rank = 4; */
        if (message.lastWeekRank !== undefined)
            writer.tag(4, WireType.Varint).int32(message.lastWeekRank);
        /* optional uint32 peak_in_game = 5; */
        if (message.peakInGame !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.peakInGame);
        /* optional uint32 daily_active_players = 6; */
        if (message.dailyActivePlayers !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dailyActivePlayers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
 */
export const CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank = new CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedSteamDeckGames_Request$Type extends MessageType<CSteamCharts_GetMostPlayedSteamDeckGames_Request> {
    constructor() {
        super("CSteamCharts_GetMostPlayedSteamDeckGames_Request", [
            { no: 1, name: "context", kind: "message", T: () => StoreBrowseContext },
            { no: 2, name: "data_request", kind: "message", T: () => StoreBrowseItemDataRequest },
            { no: 3, name: "top_played_period", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { description: "enum" } },
            { no: 4, name: "count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedSteamDeckGames_Request>): CSteamCharts_GetMostPlayedSteamDeckGames_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedSteamDeckGames_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedSteamDeckGames_Request): CSteamCharts_GetMostPlayedSteamDeckGames_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional StoreBrowseContext context */ 1:
                    message.context = StoreBrowseContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* optional StoreBrowseItemDataRequest data_request */ 2:
                    message.dataRequest = StoreBrowseItemDataRequest.internalBinaryRead(reader, reader.uint32(), options, message.dataRequest);
                    break;
                case /* optional int32 top_played_period */ 3:
                    message.topPlayedPeriod = reader.int32();
                    break;
                case /* optional int32 count */ 4:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedSteamDeckGames_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional StoreBrowseContext context = 1; */
        if (message.context)
            StoreBrowseContext.internalBinaryWrite(message.context, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional StoreBrowseItemDataRequest data_request = 2; */
        if (message.dataRequest)
            StoreBrowseItemDataRequest.internalBinaryWrite(message.dataRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 top_played_period = 3; */
        if (message.topPlayedPeriod !== undefined)
            writer.tag(3, WireType.Varint).int32(message.topPlayedPeriod);
        /* optional int32 count = 4; */
        if (message.count !== undefined)
            writer.tag(4, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Request
 */
export const CSteamCharts_GetMostPlayedSteamDeckGames_Request = new CSteamCharts_GetMostPlayedSteamDeckGames_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedSteamDeckGames_Response$Type extends MessageType<CSteamCharts_GetMostPlayedSteamDeckGames_Response> {
    constructor() {
        super("CSteamCharts_GetMostPlayedSteamDeckGames_Response", [
            { no: 1, name: "ranks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank },
            { no: 2, name: "top_played_period", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { description: "enum" } }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedSteamDeckGames_Response>): CSteamCharts_GetMostPlayedSteamDeckGames_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ranks = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedSteamDeckGames_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedSteamDeckGames_Response): CSteamCharts_GetMostPlayedSteamDeckGames_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank ranks */ 1:
                    message.ranks.push(CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 top_played_period */ 2:
                    message.topPlayedPeriod = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedSteamDeckGames_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank ranks = 1; */
        for (let i = 0; i < message.ranks.length; i++)
            CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.internalBinaryWrite(message.ranks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 top_played_period = 2; */
        if (message.topPlayedPeriod !== undefined)
            writer.tag(2, WireType.Varint).int32(message.topPlayedPeriod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Response
 */
export const CSteamCharts_GetMostPlayedSteamDeckGames_Response = new CSteamCharts_GetMostPlayedSteamDeckGames_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank$Type extends MessageType<CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank> {
    constructor() {
        super("CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank", [
            { no: 1, name: "rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item", kind: "message", T: () => StoreItem },
            { no: 4, name: "last_period_rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank>): CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank): CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* optional uint32 appid */ 2:
                    message.appid = reader.uint32();
                    break;
                case /* optional StoreItem item */ 3:
                    message.item = StoreItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional int32 last_period_rank */ 4:
                    message.lastPeriodRank = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 rank = 1; */
        if (message.rank !== undefined)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* optional uint32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.appid);
        /* optional StoreItem item = 3; */
        if (message.item)
            StoreItem.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 last_period_rank = 4; */
        if (message.lastPeriodRank !== undefined)
            writer.tag(4, WireType.Varint).int32(message.lastPeriodRank);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
 */
export const CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank = new CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetTopReleasesPages_Request$Type extends MessageType<CSteamCharts_GetTopReleasesPages_Request> {
    constructor() {
        super("CSteamCharts_GetTopReleasesPages_Request", []);
    }
    create(value?: PartialMessage<CSteamCharts_GetTopReleasesPages_Request>): CSteamCharts_GetTopReleasesPages_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetTopReleasesPages_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetTopReleasesPages_Request): CSteamCharts_GetTopReleasesPages_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetTopReleasesPages_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetTopReleasesPages_Request
 */
export const CSteamCharts_GetTopReleasesPages_Request = new CSteamCharts_GetTopReleasesPages_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetTopReleasesPages_Response$Type extends MessageType<CSteamCharts_GetTopReleasesPages_Response> {
    constructor() {
        super("CSteamCharts_GetTopReleasesPages_Response", [
            { no: 1, name: "pages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetTopReleasesPages_Response>): CSteamCharts_GetTopReleasesPages_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pages = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetTopReleasesPages_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetTopReleasesPages_Response): CSteamCharts_GetTopReleasesPages_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage pages */ 1:
                    message.pages.push(CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetTopReleasesPages_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage pages = 1; */
        for (let i = 0; i < message.pages.length; i++)
            CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.internalBinaryWrite(message.pages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetTopReleasesPages_Response
 */
export const CSteamCharts_GetTopReleasesPages_Response = new CSteamCharts_GetTopReleasesPages_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage$Type extends MessageType<CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage> {
    constructor() {
        super("CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_of_month", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "url_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "item_ids", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => StoreItemID }
        ]);
    }
    create(value?: PartialMessage<CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage>): CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage): CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional uint32 start_of_month */ 2:
                    message.startOfMonth = reader.uint32();
                    break;
                case /* optional string url_path */ 3:
                    message.urlPath = reader.string();
                    break;
                case /* repeated StoreItemID item_ids */ 4:
                    message.itemIds.push(StoreItemID.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional uint32 start_of_month = 2; */
        if (message.startOfMonth !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.startOfMonth);
        /* optional string url_path = 3; */
        if (message.urlPath !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.urlPath);
        /* repeated StoreItemID item_ids = 4; */
        for (let i = 0; i < message.itemIds.length; i++)
            StoreItemID.internalBinaryWrite(message.itemIds[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
 */
export const CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage = new CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage$Type();
/**
 * @generated ServiceType for protobuf service SteamCharts
 */
export const SteamCharts = new ServiceType("SteamCharts", [
    { name: "GetBestOfYearPages", options: {}, I: CSteamCharts_GetBestOfYearPages_Request, O: CSteamCharts_GetBestOfYearPages_Response },
    { name: "GetGamesByConcurrentPlayers", options: {}, I: CSteamCharts_GetGamesByConcurrentPlayers_Request, O: CSteamCharts_GetGamesByConcurrentPlayers_Response },
    { name: "GetMonthTopAppReleases", options: {}, I: CSteamCharts_GetMonthTopAppReleases_Request, O: CSteamCharts_GetMonthTopAppReleases_Response },
    { name: "GetMostPlayedGames", options: {}, I: CSteamCharts_GetMostPlayedGames_Request, O: CSteamCharts_GetMostPlayedGames_Response },
    { name: "GetMostPlayedSteamDeckGames", options: {}, I: CSteamCharts_GetMostPlayedSteamDeckGames_Request, O: CSteamCharts_GetMostPlayedSteamDeckGames_Response },
    { name: "GetTopReleasesPages", options: {}, I: CSteamCharts_GetTopReleasesPages_Request, O: CSteamCharts_GetTopReleasesPages_Response }
]);
