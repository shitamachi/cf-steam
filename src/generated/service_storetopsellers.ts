// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "service_storetopsellers.proto" (syntax proto2)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StoreItem } from "./common";
import { StoreBrowseItemDataRequest } from "./common";
import { StoreBrowseContext } from "./common";
/**
 * @generated from protobuf message CStoreTopSellers_GetCountryList_Request
 */
export interface CStoreTopSellers_GetCountryList_Request {
    /**
     * @generated from protobuf field: optional string language = 1
     */
    language?: string;
}
/**
 * @generated from protobuf message CStoreTopSellers_GetCountryList_Response
 */
export interface CStoreTopSellers_GetCountryList_Response {
    /**
     * @generated from protobuf field: repeated CStoreTopSellers_GetCountryList_Response_Country countries = 1
     */
    countries: CStoreTopSellers_GetCountryList_Response_Country[];
}
/**
 * @generated from protobuf message CStoreTopSellers_GetCountryList_Response_Country
 */
export interface CStoreTopSellers_GetCountryList_Response_Country {
    /**
     * @generated from protobuf field: optional string country_code = 1
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional string name = 2
     */
    name?: string;
}
/**
 * @generated from protobuf message CStoreTopSellers_GetWeeklyTopSellers_Request
 */
export interface CStoreTopSellers_GetWeeklyTopSellers_Request {
    /**
     * @generated from protobuf field: optional string country_code = 1
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional StoreBrowseContext context = 2
     */
    context?: StoreBrowseContext;
    /**
     * @generated from protobuf field: optional StoreBrowseItemDataRequest data_request = 3
     */
    dataRequest?: StoreBrowseItemDataRequest;
    /**
     * @generated from protobuf field: optional uint32 start_date = 4
     */
    startDate?: number;
    /**
     * @generated from protobuf field: optional int32 page_start = 5
     */
    pageStart?: number;
    /**
     * @generated from protobuf field: optional int32 page_count = 6 [default = 20]
     */
    pageCount?: number;
}
/**
 * @generated from protobuf message CStoreTopSellers_GetWeeklyTopSellers_Response
 */
export interface CStoreTopSellers_GetWeeklyTopSellers_Response {
    /**
     * @generated from protobuf field: optional uint32 start_date = 1
     */
    startDate?: number;
    /**
     * @generated from protobuf field: repeated CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank ranks = 2
     */
    ranks: CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank[];
    /**
     * @generated from protobuf field: optional int32 next_page_start = 3
     */
    nextPageStart?: number;
}
/**
 * @generated from protobuf message CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank
 */
export interface CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank {
    /**
     * @generated from protobuf field: optional int32 rank = 1
     */
    rank?: number;
    /**
     * @generated from protobuf field: optional int32 appid = 2
     */
    appid?: number;
    /**
     * @generated from protobuf field: optional StoreItem item = 3
     */
    item?: StoreItem;
    /**
     * @generated from protobuf field: optional int32 last_week_rank = 4
     */
    lastWeekRank?: number;
    /**
     * @generated from protobuf field: optional int32 consecutive_weeks = 5
     */
    consecutiveWeeks?: number;
    /**
     * @generated from protobuf field: optional bool first_top100 = 6
     */
    firstTop100?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetCountryList_Request$Type extends MessageType<CStoreTopSellers_GetCountryList_Request> {
    constructor() {
        super("CStoreTopSellers_GetCountryList_Request", [
            { no: 1, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetCountryList_Request>): CStoreTopSellers_GetCountryList_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetCountryList_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetCountryList_Request): CStoreTopSellers_GetCountryList_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string language */ 1:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetCountryList_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string language = 1; */
        if (message.language !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetCountryList_Request
 */
export const CStoreTopSellers_GetCountryList_Request = new CStoreTopSellers_GetCountryList_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetCountryList_Response$Type extends MessageType<CStoreTopSellers_GetCountryList_Response> {
    constructor() {
        super("CStoreTopSellers_GetCountryList_Response", [
            { no: 1, name: "countries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CStoreTopSellers_GetCountryList_Response_Country }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetCountryList_Response>): CStoreTopSellers_GetCountryList_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countries = [];
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetCountryList_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetCountryList_Response): CStoreTopSellers_GetCountryList_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CStoreTopSellers_GetCountryList_Response_Country countries */ 1:
                    message.countries.push(CStoreTopSellers_GetCountryList_Response_Country.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetCountryList_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CStoreTopSellers_GetCountryList_Response_Country countries = 1; */
        for (let i = 0; i < message.countries.length; i++)
            CStoreTopSellers_GetCountryList_Response_Country.internalBinaryWrite(message.countries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetCountryList_Response
 */
export const CStoreTopSellers_GetCountryList_Response = new CStoreTopSellers_GetCountryList_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetCountryList_Response_Country$Type extends MessageType<CStoreTopSellers_GetCountryList_Response_Country> {
    constructor() {
        super("CStoreTopSellers_GetCountryList_Response_Country", [
            { no: 1, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetCountryList_Response_Country>): CStoreTopSellers_GetCountryList_Response_Country {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetCountryList_Response_Country>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetCountryList_Response_Country): CStoreTopSellers_GetCountryList_Response_Country {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string country_code */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetCountryList_Response_Country, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string country_code = 1; */
        if (message.countryCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetCountryList_Response_Country
 */
export const CStoreTopSellers_GetCountryList_Response_Country = new CStoreTopSellers_GetCountryList_Response_Country$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetWeeklyTopSellers_Request$Type extends MessageType<CStoreTopSellers_GetWeeklyTopSellers_Request> {
    constructor() {
        super("CStoreTopSellers_GetWeeklyTopSellers_Request", [
            { no: 1, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "context", kind: "message", T: () => StoreBrowseContext },
            { no: 3, name: "data_request", kind: "message", T: () => StoreBrowseItemDataRequest },
            { no: 4, name: "start_date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "page_start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "page_count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetWeeklyTopSellers_Request>): CStoreTopSellers_GetWeeklyTopSellers_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetWeeklyTopSellers_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetWeeklyTopSellers_Request): CStoreTopSellers_GetWeeklyTopSellers_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string country_code */ 1:
                    message.countryCode = reader.string();
                    break;
                case /* optional StoreBrowseContext context */ 2:
                    message.context = StoreBrowseContext.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                case /* optional StoreBrowseItemDataRequest data_request */ 3:
                    message.dataRequest = StoreBrowseItemDataRequest.internalBinaryRead(reader, reader.uint32(), options, message.dataRequest);
                    break;
                case /* optional uint32 start_date */ 4:
                    message.startDate = reader.uint32();
                    break;
                case /* optional int32 page_start */ 5:
                    message.pageStart = reader.int32();
                    break;
                case /* optional int32 page_count = 6 [default = 20] */ 6:
                    message.pageCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetWeeklyTopSellers_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string country_code = 1; */
        if (message.countryCode !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.countryCode);
        /* optional StoreBrowseContext context = 2; */
        if (message.context)
            StoreBrowseContext.internalBinaryWrite(message.context, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional StoreBrowseItemDataRequest data_request = 3; */
        if (message.dataRequest)
            StoreBrowseItemDataRequest.internalBinaryWrite(message.dataRequest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 start_date = 4; */
        if (message.startDate !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.startDate);
        /* optional int32 page_start = 5; */
        if (message.pageStart !== undefined)
            writer.tag(5, WireType.Varint).int32(message.pageStart);
        /* optional int32 page_count = 6 [default = 20]; */
        if (message.pageCount !== undefined)
            writer.tag(6, WireType.Varint).int32(message.pageCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetWeeklyTopSellers_Request
 */
export const CStoreTopSellers_GetWeeklyTopSellers_Request = new CStoreTopSellers_GetWeeklyTopSellers_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetWeeklyTopSellers_Response$Type extends MessageType<CStoreTopSellers_GetWeeklyTopSellers_Response> {
    constructor() {
        super("CStoreTopSellers_GetWeeklyTopSellers_Response", [
            { no: 1, name: "start_date", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ranks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank },
            { no: 3, name: "next_page_start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetWeeklyTopSellers_Response>): CStoreTopSellers_GetWeeklyTopSellers_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ranks = [];
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetWeeklyTopSellers_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetWeeklyTopSellers_Response): CStoreTopSellers_GetWeeklyTopSellers_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_date */ 1:
                    message.startDate = reader.uint32();
                    break;
                case /* repeated CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank ranks */ 2:
                    message.ranks.push(CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 next_page_start */ 3:
                    message.nextPageStart = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetWeeklyTopSellers_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_date = 1; */
        if (message.startDate !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.startDate);
        /* repeated CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank ranks = 2; */
        for (let i = 0; i < message.ranks.length; i++)
            CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank.internalBinaryWrite(message.ranks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 next_page_start = 3; */
        if (message.nextPageStart !== undefined)
            writer.tag(3, WireType.Varint).int32(message.nextPageStart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetWeeklyTopSellers_Response
 */
export const CStoreTopSellers_GetWeeklyTopSellers_Response = new CStoreTopSellers_GetWeeklyTopSellers_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank$Type extends MessageType<CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank> {
    constructor() {
        super("CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank", [
            { no: 1, name: "rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "appid", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "item", kind: "message", T: () => StoreItem },
            { no: 4, name: "last_week_rank", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "consecutive_weeks", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "first_top100", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank>): CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank): CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* optional int32 appid */ 2:
                    message.appid = reader.int32();
                    break;
                case /* optional StoreItem item */ 3:
                    message.item = StoreItem.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional int32 last_week_rank */ 4:
                    message.lastWeekRank = reader.int32();
                    break;
                case /* optional int32 consecutive_weeks */ 5:
                    message.consecutiveWeeks = reader.int32();
                    break;
                case /* optional bool first_top100 */ 6:
                    message.firstTop100 = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 rank = 1; */
        if (message.rank !== undefined)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* optional int32 appid = 2; */
        if (message.appid !== undefined)
            writer.tag(2, WireType.Varint).int32(message.appid);
        /* optional StoreItem item = 3; */
        if (message.item)
            StoreItem.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 last_week_rank = 4; */
        if (message.lastWeekRank !== undefined)
            writer.tag(4, WireType.Varint).int32(message.lastWeekRank);
        /* optional int32 consecutive_weeks = 5; */
        if (message.consecutiveWeeks !== undefined)
            writer.tag(5, WireType.Varint).int32(message.consecutiveWeeks);
        /* optional bool first_top100 = 6; */
        if (message.firstTop100 !== undefined)
            writer.tag(6, WireType.Varint).bool(message.firstTop100);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank
 */
export const CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank = new CStoreTopSellers_GetWeeklyTopSellers_Response_TopSellersRank$Type();
/**
 * @generated ServiceType for protobuf service StoreTopSellers
 */
export const StoreTopSellers = new ServiceType("StoreTopSellers", [
    { name: "GetCountryList", options: {}, I: CStoreTopSellers_GetCountryList_Request, O: CStoreTopSellers_GetCountryList_Response },
    { name: "GetWeeklyTopSellers", options: {}, I: CStoreTopSellers_GetWeeklyTopSellers_Request, O: CStoreTopSellers_GetWeeklyTopSellers_Response }
]);
